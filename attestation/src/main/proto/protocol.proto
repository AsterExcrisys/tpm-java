syntax = "proto3";

package de.fhg.iosb.iad.tpm.attestation;

option java_multiple_files = true;

// Enum that describes the type of the protocol.
enum ProtocolType {
  UNKNOWN_PROTOCOL = 0;
  TPM_TAP          = 1;
  TPM_MSCP         = 2;
}

// Enum that describes the type of a protocol message.
enum ProtocolMessageType {
  UNKNOWN_MESSAGE          = 0;
  ABORT_MESSAGE            = 1;
  CLIENT_INIT              = 2;
  SERVER_INIT              = 3;
  CLIENT_ATTESTATION       = 4;
  SERVER_ATTESTATION       = 5;
  CLIENT_KEY_ESTABLISHMENT = 6;
  SERVER_KEY_ESTABLISHMENT = 7;
  CLIENT_FINISH            = 8;
  SERVER_FINISH            = 9;
  CLIENT_SUCCESS           = 10;
}

// A protocol message. The message type is given by |type|.
message ProtocolMessage {
  ProtocolMessageType type                     = 1;
  oneof message {
    AbortMessage abort                         = 2;
    InitMessage init                           = 3;
    AttestationMessage attestation             = 4;
    KeyEstablishmentMessage key_establishment  = 5;
    FinishMessage finish                       = 6;
    SuccessMessage success                     = 7;
  }
}

message AbortMessage {
  enum ErrorCode {
    // Unknown error.
    UNKNOWN_ERROR     = 0;
    // Internal protocol error. Indicates a bug.
    INTERNAL_ERROR    = 1;
    // Error while reading or writing messages.
    IO_ERROR          = 2;
    // Error while accessing the TPM.
    TPM_ERROR         = 3;
    // Peer does not accept the requested protocol type.
    BAD_PROTOCOL_TYPE = 4;
    // Received message is bad.
    BAD_MESSAGE       = 5;
    // Received PCR selection does not match the request.
    BAD_PCR_SELECTION = 6;
    // Received quote does not verify correctly.
    BAD_QUOTE         = 7;
     // Received certificate does not verify correctly.
    BAD_CERT          = 8;
    // Calculated HMAC does not match.
    BAD_HMAC          = 9;
}
  ErrorCode code = 1;
  string message = 2;
}

message InitMessage {
  // Protocol type.
  ProtocolType protocol_type    = 1;
  // Public part of the quoting key. May not be set if the protocol does not include attestation.
  bytes quoting_key             = 2;
  // Nonce to use in the attestation. May not be set if the protocol does not include attestation.
  bytes nonce                   = 3;
  // PCR selection to attest. May not be set if the protocol does not include attestation.
  repeated uint32 pcr_selection = 4;
}

message AttestationMessage {
  // Signed quote that satisfies the request.
  bytes quote                    = 1;
  // PCR values that the quote attests to.
  map<uint32, string> pcr_values = 2;
}

message KeyEstablishmentMessage {
  // Public part of a key pair used to certify the encrypted channel.
  bytes public_key  = 1;
  // Certification structure that authenticates the public key.
  bytes certificate = 2;
}

message FinishMessage {
  // HMAC over the shared secret.
  bytes hmac    = 1;
  // Random shared initialization vector.
  bytes iv      = 2;
}

message SuccessMessage {
}