package de.fhg.iosb.iad.tpm.commons;

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import de.fhg.iosb.iad.tpm.commons.TpmEngine.TpmEngineException;
import tss.tpm.PCR_ReadResponse;
import tss.tpm.QuoteResponse;
import tss.tpm.TPMA_OBJECT;
import tss.tpm.TPMS_PCR_SELECTION;
import tss.tpm.TPMT_PUBLIC;
import tss.tpm.TPM_ALG_ID;

public class TpmQuoteVerifier {

	private static final Logger LOG = LoggerFactory.getLogger(TpmQuoteVerifier.class);

	private static final TPM_ALG_ID pcrHashAlg = TPM_ALG_ID.SHA256;

	/**
	 * Verify a received quote.
	 * 
	 * @param quote          The received quote, which has been generated by quote()
	 *                       on the remote system.
	 * @param qualifyingData User data like nonces that are expected in the quote.
	 * @param quotingKeyPub  Public part of the key that has been used to generate
	 *                       the quote (i.e. that can verify the signature of the
	 *                       quote's data part).
	 * @param pcrValues      Map of PCR values as hex strings that are expected in
	 *                       this quote.
	 * @return true, if the quote verified correctly
	 */
	public boolean verifyQuote(byte[] quote, byte[] qualifyingData, byte[] quotingKeyPub,
			Map<Integer, String> pcrValues) throws TpmEngineException {
		TPMT_PUBLIC remoteQk = null;
		QuoteResponse remoteQuote = null;
		try {
			remoteQuote = QuoteResponse.fromBytes(quote);
			remoteQk = TPMT_PUBLIC.fromBytes(quotingKeyPub);
		} catch (Exception e) {
			throw new TpmEngineException("Error while parsing TPM data structures", e);
		}
		// Verify attributes of remote quoting key
		if (!remoteQk.objectAttributes.hasAttr(TPMA_OBJECT.restricted)) {
			LOG.warn("Quote verification failed: Remote quoting key is not restricted!");
			return false;
		}
		if (!remoteQk.objectAttributes.hasAttr(TPMA_OBJECT.sign)) {
			LOG.warn("Quote verification failed: Remote quoting key is not a signing key!");
			return false;
		}

		// Validate quote
		PCR_ReadResponse expectedPcrs = new PCR_ReadResponse();
		expectedPcrs.pcrSelectionOut = new TPMS_PCR_SELECTION[] {
				TpmHelper.createPcrSelection(pcrValues.keySet(), pcrHashAlg) };
		expectedPcrs.pcrValues = TpmHelper.createPcrDigests(pcrValues);
		expectedPcrs.pcrUpdateCounter = 0;
		boolean valid = false;
		try {
			valid = remoteQk.validateQuote(expectedPcrs, qualifyingData, remoteQuote);
		} catch (Exception e) {
			throw new TpmEngineException("Error while validating quote signature", e);
		}
		return valid;
	}
}
